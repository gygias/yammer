//
//  PrefixHeader.pch
//  yammer
//
//  Created by david on 11/9/15.
//  Copyright Â© 2015 combobulated. All rights reserved.
//

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

#define YM_TOKEN_STR(x) #x
#define YM_STR_TOKEN(x,y) x ## y

#define YM_CALL(func, type) { void func(type); YM_FUNC_NAME(func)(); }
#define YM_CALL_V(func, firstType, first, ...) func(first,__VA_ARGS__) // iso c requires 'first'
#define YM_CALL_DV(func, firstType, first, ...) { void func(firstType arg1,...); func(first,__VA_ARGS__); } // iso c requires 'first'

//#define STR(x) YM_TOKEN_STR(x)
//#pragma message STR(__FILE__) ": example: " STR(example)

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <stdbool.h>
#include <stdint.h>

#ifndef _WINDOWS
#include <unistd.h>
#endif

#define YM_VERSION 1

#ifndef _WINDOWS
#define YM_VARGS_SENTINEL_REQUIRED __attribute__((sentinel(0,1)))
#define YM_WPPUSH \
    _Pragma("GCC diagnostic push") \
    _Pragma("GCC diagnostic ignored \"-Wpedantic\"")
#define YM_WPOP \
    _Pragma("GCC diagnostic pop")
#else
/*#define bool unsigned char
#define false 0
#define true 1
typedef __int32 int32_t;
typedef unsigned __int32 uint32_t;
typedef unsigned __int16 uint16_t;
typedef unsigned __int8 uint8_t;
typedef unsigned int size_t;*/
#define YM_VARGS_SENTINEL_REQUIRED
#define __printflike(x,y)
#define YM_WPPUSH
#define YM_WPOP
#define __unused
#define typeof decltype
#endif

#include "YMBase.h"
#include "YMInternal.h"

#ifdef DEBUG
#include <malloc/malloc.h>
#define YM_DEBUG_ASSERT_MALLOC(x) { if ( ( x != NULL) && ( malloc_size(x) <= 0 ) ) { ymerr("debug: malloc didn't allocate this address: %p",(x)); abort(); } }
#define YM_INSANE_CHUNK_SIZE 65535
#define YM_DEBUG_CHUNK_SIZE(x) { if ( ( (x) == 0 ) || ( (x) > YM_INSANE_CHUNK_SIZE ) ) { ymerr("debug: chunk length not sane: %u",(x)); abort(); } }
#else
#define YM_DEBUG_ASSERT_MALLOC(x) ;
#define YM_DEBUG_CHUNK_SIZE(x) ;
#endif

#endif /* PrefixHeader_pch */
